Execution context , object provided by java script execution environment by default is this and window object
Global execution context.

accoscitivity of operators decides how wil it run.

Coversion - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
how coversion is helpful in java script :

Boolean(undefined) => false
Boolean(null) => false
Boolean("") => false


var a;

if(a || a === 0)
{
// as 0 is coversed to false so we applied zero check seperately
console.log("Something is there")

}

here we used coversion to our own advantage to check weather the value of a is undefined, null or "".
if not then it will print otherwise not.

# Default Values 

function greet(name){
console.log('Hello' + name);
}

greet();

output is Hello undefined 

0 || 1 => returns the first true
null || "hello" => retuns hello


so in the above code 

function greet(name){

name = name || '<your nme here>'
console.log('Hello' + name);
}

greet('tony');
greet();
output is hello tony and hello <your name here>

remember about 0 it will coverse to zero as well .
 -----------------------------
 we created 2 files lib1 and lib2 and declare same name in both and then called it with the app.js to see which name it picks 
 To overcome that a libray override other library 
 
  var libraryName = "lib2"; // instead of this we did below code , this code prints lib2 

window.libraryName = window.libraryName || "Lib 2"; // but this will print lib1 because it will first check that any global variable with the same name is already there or not

-------------------------------------
Objects and functions 

How objects resides in computer memory ?

1. primitve "property"
2. object  "property" (as it may have another nested name vale pair) 
3. function "method" --> functions attache with an object is called as method not function so an object has a properties and methods.


var person = new Object();

// now we will add methods and properties

person["firstname"] = "Tony"; // it wil go ahead and create
person["lastname"] = "Alicia";

var firstnameproperty = "firstname";

console.log(person); // outputs an object
console.log(person[firstnameproperty]); // outputs Tony, using computed member access operator

// now we will see another

console.log(person.firstname); // output is Tony, using dot operator or member access operator
console.log(person.lastname); // output is Tony, using dot operator or member access operator

person.address = new Object(); // we have created new object named adress inside person object

person.address.street = "111 Main st. "; // adding prperty to the object

person.address = new Object();

person.address.street = "500 Race street";
person.address.apartment = "Mosiac";
person.address.city = "San jose";

console.log(person["address"]["city"]);

console.log(person);

// preffered approach is using dot operator

----------------------------------------------

Objects and objects literals

// pevious way of creating object is not ideal

// there is a short hand for this and that is object literals thst is {} it is same a new Object();

var person {}; // short hand to create an object

// I can also initialize object like above and add values in it like below

var person = {
  firstname: "Ayush",
  lastname: "Joshi",
  address : {
  city : 'San jose',
  state : 'California'
  }
};

console.log(person);

-----------------------------------------------------

Object literal 

we can use object literal sytax to create and manuplulate object by creating that string on the fly when the function is called.





