Whitesapce liberty in javascript 

Example

var
// first person 
firstperson ,

// last name of person 
lastperson

// i can also do it insite object literals
----------------------------------------

Immidiately Invoked Function Expressions (IIFE)s


// function statement
function greet(name) {
  console.log("Hello " + name);
}

greet("John");

// using a function expression

var greeting = function (name) {
  console.log("Hello " + name);
};
greeting("josh");

// using a iife

var greetingIife = (function (name) {
  return "Hello " + name;
})("pappu");

console.log(greetingIife);

// but if is say 
greetingIife();
// it will through an error because we have invoke the function object already and passed a value 
// so it returns a string and hence greetingIife() will say string is not a function error

---------------------

i can write 

3;

or 

{
name : 'ayush'
}
and run it , this wont give any error 

but when i write a function 

function(name){

return 'Hello';

}


Cuz the syntax parser saw the word function as the beginning of a new line or

segment of code, it was after this semi-colon here.

So it expects that this is a function statement, it wants it to have a name.

It can't be anonymous.

So this syntax is a problem.

If I just put function, this isn't a function expression.

It's a function statement.

-----------

so how fix it ===> wrap the function inside a parantheris 

You never put a statement inside

parentheses, like if something.

It always is an expression, something that returns a value.

So since the JavaScript engine knows that anything inside a parentheses must


(
function(name){

return 'Hello';

});

// now the aboce code stays there but wont give error

// to run it use prantehsis like

(
function(name){

return 'Hello';

}());

// above is the example of classic IIFE 

// now we tricked the syntax parser
// and called the function as well 

//Everyone agrees to use parentheses, but you could invoke it

inside the parentheses or you could invoke it outside the parentheses.

It doesn't really matter, both work the same way.
