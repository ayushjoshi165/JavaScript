var person = {
  firstname: "ayush",
  lastname: "joshi",
  fullname: function () {
    console.log("Print fuull name" + this.firstname + " " + this.lastname);
  },
};

var printName = function () {
  console.log(this.firstname + "  " + this.lastname);
}.bind(person);
// above we binded this reference to person object otherwise the execution context of this was global.
printName(); // one way to do that

var printNameAfterBind = printName.bind(person);
printNameAfterBind();

// above is the other way to do it.

------------------------

call

Unlike bind, which creates a copy of the function, call actually executes it.

And then just decides what the this variable should be and


-------------

Apply method 

apply method wants an array

of parameters, rather than just the normal list.

And that's the only difference between call and apply.

-------------------------

function borrowing 

var person = {
  firstname: "kush",
  lastname: "John"

console.log(person.fullName.apply(person2));


this will print Kush John as we borrowed the function from person object and applied for person 2.

// here we are borrowing function from person object to apply to person 2 object .

--------------------------------------


Function currying: 

creating a copy of a function but with some preset parameters.

Their cert turns out to be really useful in mathematical situations,

so if you're building a library that has to do a lot of mathematical calculations,

you can have some fundamental functions that you can then build on with some other

default parameters.

A really good useful usage for bind.

function multiply(a ,b) {
return a*b;
}

var multiplyByTwo = multiply.bind(this, 2);

multiplyByTwo(3);
// above print 6 as we set the first value by 2 using bind;
